docker compose --profile test up --build tradedata-tests kafkaconsumer-tests ingestsql-tests   --abort-on-container-exit  -- UT testing 

####single command 
docker build --target test -t tradedata:test .
docker run --rm tradedata:test

docker build --target test -t kafkaconsumer:test .
docker run --rm kafkaconsumer:test

docker build -f Dockerfile --target test -t kafkaconsumermssql:test .
docker run --rm kafkaconsumermssql:test 




####remove all
docker compose down
docker compose down -v
docker compose down --remove-orphans
docker rm -f tradestore-inputfeed-it-1
docker container prune


docker compose --profile test up --build --exit-code-from tradedata-tests tradedata-tests
# then explicitly clean:
docker compose rm -fsv



Integration 2-step 
# 1) bring up infra + app
docker compose up -d redpanda redpanda-init tradedata -- prefer compose -d (all one and not these 3)

# 2) run the feed once, capture exit code (non-zero if your script reports failures) -- integration 
docker compose run --rm inputfeed-it

# 3) optionally tear down
docker compose down


###regression
# rebuild the image so the updated conftest.py is copied in
docker build -f tests/RegressionRunner.Dockerfile -t tradestore/regression:latest .

# run via compose
docker compose --profile regression up --build --exit-code-from regression-runner regression-runner


Create/update .env in the repo root (Compose auto-loads it):
echo 'MSSQL_SA_PASSWORD=Str0ng!Passw0rd' >> .env

docker compose build expiry-cron
# if SQL is not built/pulled yet:
docker compose pull mssql || true
docker compose up -d expiry-cron or docker compose up -d mssql mssql-init expiry-cron


//Manual 
docker compose run --rm   -e MSSQL_SA_PASSWORD='Str0ng!Passw0rd'  expiry-cron   bash -lc '/opt/mssql-tools/bin/sqlcmd -S mssql,1433 -U sa -P "$MSSQL_SA_PASSWORD" -C -b -Q "UPDATE dbo.trades SET expired=1 WHERE maturity_date < CONVERT(date, GETDATE()) AND expired=0;"'



