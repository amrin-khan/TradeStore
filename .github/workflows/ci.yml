name: TradeStore CI

on:
  push:
    branches:
      - main
      - 'feature/**'       # was 'feature/wip' â€” use this if you want all feature branches
  pull_request:

permissions:
  contents: read
  packages: write
  # security-events: write   # only needed if you upload SARIF

env:
  COMPOSE_FILE: docker-compose.yml
  IMAGE_PREFIX: ghcr.io/${{ github.repository }}:${{ github.sha }}

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # ---- Create .env for compose ----
      - name: Write .env for compose
        run: |
          echo "MSSQL_SA_PASSWORD=${{ secrets.MSSQL_SA_PASSWORD }}" > .env
          echo ".env created"

      # ---- Python toolchain + Safety v3 ----
      - name: Set up Python for Safety
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install Safety v3 and verify
        run: |
          python -m pip install --upgrade pip
          python -m pip uninstall -y safety || true
          python -m pip install --no-cache-dir "safety>=3.0.0,<4"
          python -m safety --version

      - name: Write Safety v3 policy
        shell: bash
        run: |
          cat > .safety-policy.yml <<'YAML'
        version: '3.0'
        scanning-settings:
          include-files:
            - path: TradeData/requirements.txt
              file-type: requirements.txt
            - path: kafkaconsumer/requirements.txt
              file-type: requirements.txt
            - path: KafkaConsumerMSSql/requirements.txt
              file-type: requirements.txt
        report:
          dependency-vulnerabilities:
            auto-ignore-in-report:
              cvss-severity: [low, medium]
        fail-scan-with-exit-code:
          dependency-vulnerabilities:
            enabled: true
            fail-on-any-of:
              cvss-severity: [high, critical]
        YAML

      - name: Safety scan (policy-driven)
        run: |
          python -m safety scan --policy-file .safety-policy.yml --detailed-output

      # ---- Build service images ----
      - name: Build images
        run: |
          docker build -t $IMAGE_PREFIX-tradedata TradeData
          docker build -t $IMAGE_PREFIX-kc-mongo kafkaconsumer
          docker build -t $IMAGE_PREFIX-kc-mssql KafkaConsumerMSSql

      - name: Push images (optional)
        run: |
          docker push $IMAGE_PREFIX-tradedata
          docker push $IMAGE_PREFIX-kc-mongo
          docker push $IMAGE_PREFIX-kc-mssql

      # ---- Bring up infra + apps ----
      - name: Compose up core infra (Kafka, Mongo, MSSQL)
        run: |
          docker compose up -d redpanda mongo mssql
          echo "Waiting for health..."
          for i in {1..60}; do
            H=$(docker inspect -f '{{.State.Health.Status}}' $(docker compose ps -q redpanda) || echo "starting")
            [ "$H" = "healthy" ] && break || sleep 2
          done
          for i in {1..60}; do
            H=$(docker inspect -f '{{.State.Health.Status}}' $(docker compose ps -q mongo) || echo "starting")
            [ "$H" = "healthy" ] && break || sleep 2
          done
          sleep 10

      - name: Init Kafka topic (redpanda-init)
        run: docker compose up --no-deps --wait redpanda-init || true

      - name: Start application services (without dev profile)
        run: |
          docker compose up -d tradedata kafkaconsumer kafkaconsumermssql
          sleep 5
          docker compose ps

      # ---- Image scans (fail on HIGH/CRITICAL) ----
      - name: Trivy scan - TradeData
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_PREFIX }}-tradedata
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: '1'
          format: 'table'

      - name: Trivy scan - KafkaConsumer (Mongo)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_PREFIX }}-kc-mongo
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: '1'
          format: 'table'

      - name: Trivy scan - KafkaConsumerMSSQL
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_PREFIX }}-kc-mssql
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: '1'
          format: 'table'

      - name: Dump recent logs (always)
        if: always()
        run: |
          docker compose logs --no-color --since 15m > compose-logs.txt || true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: compose-logs.txt

      - name: Tear down (always)
        if: always()
        env:
          MSSQL_SA_PASSWORD: ${{ secrets.MSSQL_SA_PASSWORD }}
          DROP_TABLE: "false"
        run: |
          [ -f .env ] || { echo "MSSQL_SA_PASSWORD=$MSSQL_SA_PASSWORD" > .env; echo "DROP_TABLE=$DROP_TABLE" >> .env; }
          docker compose --env-file .env down -v
