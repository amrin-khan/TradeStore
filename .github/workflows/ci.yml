name: TradeStore CI

on:
  push:
    # branches:
      # - main
  pull_request:

permissions:
  contents: read
  packages: write
  # security-events: write

env:
  COMPOSE_FILE: docker-compose.yml
  # Build a tag prefix using owner/repo + sha, then a lowercase version for Docker
  IMAGE_PREFIX: ${{ format('ghcr.io/{0}:{1}', github.repository, github.sha) }}
  # IMAGE_PREFIX_LC: ${{ lower(format('ghcr.io/{0}:{1}', github.repository, github.sha)) }}

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute lowercase IMAGE_PREFIX_LC
        run: |
          echo "IMAGE_PREFIX_LC=$(echo ghcr.io/${GITHUB_REPOSITORY}:${GITHUB_SHA} | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_ENV"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # ---- Create .env for compose ----
      - name: Write .env for compose
        run: |
          echo "MSSQL_SA_PASSWORD=${{ secrets.MSSQL_SA_PASSWORD }}" > .env
          echo ".env created"

      # ---- Python toolchain + pip-audit ----
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install pip-audit
        run: python -m pip install --upgrade pip-audit

      - name: pip-audit TradeData (fail on vulns)
        if: hashFiles('TradeData/requirements.txt') != ''
        run: pip-audit -r TradeData/requirements.txt --strict

      # ---- Compose build/up using your override file ----
      - name: Compose build (use override)
        env:
          DROP_TABLE: "false"
        run: docker compose -f docker-compose.yml -f docker-compose.override.ci.yml build

      - name: Compose up core infra
        env:
          DROP_TABLE: "false"
        run: docker compose -f docker-compose.yml -f docker-compose.override.ci.yml up -d redpanda mongo mssql

      - name: Start application services
        run: docker compose -f docker-compose.yml -f docker-compose.override.ci.yml up -d tradedata kafkaconsumer kafkaconsumermssql

      # ---- (Optional) Build/tag explicit images for push & Trivy ----
      # To push & scan images by a known tag, building explicitly:
      - name: Build images (explicit tags for push/scan)
        run: |
          docker buildx build --load -t "${IMAGE_PREFIX_LC}-tradedata" TradeData
          docker buildx build --load -t "${IMAGE_PREFIX_LC}-kafkaconsumer" kafkaconsumer
          docker buildx build --load -t "${IMAGE_PREFIX_LC}-kafkaconsumermssql" KafkaConsumerMSSQL

      # ---- Push images (optional) ----
      - name: Push images (optional)
        run: |
          docker push "${{ env.IMAGE_PREFIX_LC }}-tradedata"
          docker push "${{ env.IMAGE_PREFIX_LC }}-kafkaconsumer"
          docker push "${{ env.IMAGE_PREFIX_LC }}-kafkaconsumermssql"

      # ---- (If you also bring up via base compose again, keep this block; otherwise remove) ----
      - name: Compose up core infra (Kafka, Mongo, MSSQL) [base]
        run: |
          docker compose up -d redpanda mongo mssql
          echo "Waiting for health..."
          for i in {1..60}; do
            H=$(docker inspect -f '{{.State.Health.Status}}' $(docker compose ps -q redpanda) || echo "starting")
            [ "$H" = "healthy" ] && break || sleep 2
          done
          for i in {1..60}; do
            H=$(docker inspect -f '{{.State.Health.Status}}' $(docker compose ps -q mongo) || echo "starting")
            [ "$H" = "healthy" ] && break || sleep 2
          done
          sleep 10

      - name: Init Kafka topic (redpanda-init)
        run: docker compose up --no-deps --wait redpanda-init || true

      - name: Start application services (without dev profile) [base]
        run: |
          docker compose up -d tradedata kafkaconsumer kafkaconsumermssql
          sleep 5
          docker compose ps

      # ---- Trivy scans (use lowercase tag) ----
      - name: Trivy scan - TradeData
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_PREFIX_LC }}-tradedata
          vuln-type: 'os,library'
          severity: 'CRITICAL'
          ignore-unfixed: true
          exit-code: '1'
          format: 'table'

      - name: Trivy scan - KafkaConsumer (Mongo)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_PREFIX_LC }}-kafkaconsumer
          vuln-type: 'os,library'
          severity: 'CRITICAL'
          ignore-unfixed: true
          exit-code: '1'
          format: 'table'

      - name: Trivy scan - KafkaConsumerMSSQL
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_PREFIX_LC }}-kafkaconsumermssql
          vuln-type: 'os,library'
          severity: 'CRITICAL'
          ignore-unfixed: true
          exit-code: '1'
          format: 'table'

      - name: Dump recent logs (always)
        if: always()
        run: |
          docker compose logs --no-color --since 15m > compose-logs.txt || true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: compose-logs.txt

      - name: Tear down (always)
        if: always()
        env:
          MSSQL_SA_PASSWORD: ${{ secrets.MSSQL_SA_PASSWORD }}
          DROP_TABLE: "false"
        run: |
          [ -f .env ] || { echo "MSSQL_SA_PASSWORD=$MSSQL_SA_PASSWORD" > .env; echo "DROP_TABLE=$DROP_TABLE" >> .env; }
          docker compose --env-file .env down -v