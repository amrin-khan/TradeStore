name: TradeStore CI

on:
  push:
    branches: 
      - main
      - 'feature/wip'
  pull_request:

permissions:
  contents: read
  packages: write
  security-events: write

env:
  COMPOSE_FILE: docker-compose.yml
  IMAGE_PREFIX: ghcr.io/${{ github.repository }}:${{ github.sha }}

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # ---- Create .env for your compose (required by mssql service) ----
      - name: Write .env for compose
        run: |
          echo "MSSQL_SA_PASSWORD=${{ secrets.MSSQL_SA_PASSWORD }}" > .env
          echo ".env created"

      # ---- (Optional) Python toolchain only for dependency scans ----
      - name: Set up Python for Safety
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install Safety
        run: |
          python -m pip install --upgrade pip
          pip install safety

      # ---- Dependency (requirements.txt) scans â€” fail on High/Critical ----
      - name: Safety scan - TradeData
        if: hashFiles('TradeData/requirements.txt') != ''
        run: |
          safety check --full-report --severity high --exit-code 1 -r TradeData/requirements.txt || exit 1

      - name: Safety scan - KafkaConsumer (Mongo)
        if: hashFiles('kafkaconsumer/requirements.txt') != ''
        run: |
          safety check --full-report --severity high --exit-code 1 -r kafkaconsumer/requirements.txt || exit 1

      - name: Safety scan - KafkaConsumerMSSql
        if: hashFiles('KafkaConsumerMSSql/requirements.txt') != ''
        run: |
          safety check --full-report --severity high --exit-code 1 -r KafkaConsumerMSSql/requirements.txt || exit 1

      # ---- Build service images from your compose contexts ----
      - name: Build images
        run: |
          docker build -t $IMAGE_PREFIX-tradedata TradeData
          docker build -t $IMAGE_PREFIX-kc-mongo kafkaconsumer
          docker build -t $IMAGE_PREFIX-kc-mssql KafkaConsumerMSSql

      - name: Push images (optional)
        run: |
          docker push $IMAGE_PREFIX-tradedata
          docker push $IMAGE_PREFIX-kc-mongo
          docker push $IMAGE_PREFIX-kc-mssql

      # ---- Bring up infra + apps from your docker-compose.yml ----
      - name: Compose up core infra (Kafka, Mongo, MSSQL)
        run: |
          docker compose up -d redpanda mongo mssql
          echo "Waiting for health..."
          # redpanda
          for i in {1..60}; do
            H=$(docker inspect -f '{{.State.Health.Status}}' $(docker compose ps -q redpanda) || echo "starting")
            [ "$H" = "healthy" ] && break || sleep 2
          done
          # mongo
          for i in {1..60}; do
            H=$(docker inspect -f '{{.State.Health.Status}}' $(docker compose ps -q mongo) || echo "starting")
            [ "$H" = "healthy" ] && break || sleep 2
          done
          # mssql (healthcheck in your file is port-open; give it a bit more time)
          sleep 10

      - name: Init Kafka topic (redpanda-init)
        run: docker compose up --no-deps --wait redpanda-init || true

      - name: Start application services (without dev profile)
        run: |
          docker compose up -d tradedata kafkaconsumer kafkaconsumermssql
          sleep 5
          docker compose ps

      # ---- OPTIONAL: run your dev feeder once to inject sample trades ----
      # (Uncomment if you want a smoke that POSTs to tradedata and pushes to Kafka)
      # - name: Smoke: run inputfeed once (dev profile)
      #   run: |
      #     docker compose --profile dev run --rm inputfeed
      #     sleep 5

      # ---- OPTIONAL: quick smoke checks (adjust to your DB/collection/table names) ----
      # - name: Check Mongo has trades
      #   run: |
      #     docker exec $(docker compose ps -q mongo) \
      #       mongosh --quiet --eval "db.getSiblingDB('trade_store').trades.countDocuments()"
      #
      # - name: Check MSSQL connectivity
      #   env:
      #     MSSQL_SA_PASSWORD: ${{ secrets.MSSQL_SA_PASSWORD }}
      #   run: |
      #     docker exec $(docker compose ps -q mssql) /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U sa -P "$MSSQL_SA_PASSWORD" -Q "SELECT @@VERSION;"

      # ---- Image scans (fail on HIGH/CRITICAL) ----
      - name: Trivy scan - TradeData
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_PREFIX }}-tradedata
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: '1'
          format: 'table'

      - name: Trivy scan - KafkaConsumer (Mongo)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_PREFIX }}-kc-mongo
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: '1'
          format: 'table'

      - name: Trivy scan - KafkaConsumerMSSQL
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_PREFIX }}-kc-mssql
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: '1'
          format: 'table'

      - name: Dump recent logs (always)
        if: always()
        run: |
          docker compose logs --no-color --since 15m > compose-logs.txt || true

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: compose-logs.txt

      - name: Tear down
        if: always()
        run: docker compose down -v