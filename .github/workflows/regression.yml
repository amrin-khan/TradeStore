name: Regression

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 02 * * *"
  workflow_dispatch:

jobs:
  regression:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      COMPOSE_PROJECT_NAME: tradestore
      COMPOSE_PROFILES: regression

    steps:
      - uses: actions/checkout@v4

      - name: Free disk space
        run: |
          sudo rm -rf /usr/local/lib/android /opt/ghc || true
          docker system prune -af || true

      - uses: docker/setup-buildx-action@v3

      # Create .env once
      - name: Write .env for compose
        run: |
          cat > .env <<EOF
          MSSQL_SA_PASSWORD=${{ secrets.MSSQL_SA_PASSWORD }}
          DROP_TABLE=false
          EOF

      # Optional cache (ok to remove)
      - name: Set up Docker layer cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build RegressionRunner
        run: |
          docker build -f tests/RegressionRunner.Dockerfile -t tradestore/regression:latest .

      - name: Bring up infra + apps
        run: |
          docker compose --env-file .env --profile regression up -d \
            redpanda redpanda-init mongo mssql tradedata \
            kafkaconsumer kafkaconsumermssql

      - name: Init DB (one-off)
        run: |
          docker compose --env-file .env run -T --rm --no-deps mssql-init

      - name: Wait for services to be healthy
        run: |
          set -e
          for i in {1..60}; do
            unhealthy=$(docker compose ps --format json 2>/dev/null | jq -r '.[] | select(.Health!="healthy") | .Name' | xargs || true)
            [ -z "$unhealthy" ] && break
            echo "Waiting for healthy containers... not healthy: $unhealthy"
            sleep 2
          done
          for i in {1..60}; do
            if curl -fsS http://localhost:8001/health >/dev/null 2>&1; then
              echo "tradedata healthy"
              break
            fi
            echo "Waiting for tradedata health..."
            sleep 2
          done
          docker compose exec -T redpanda rpk topic list --brokers redpanda:9092 || true

      - name: Debug MSSQL connectivity
        run: |
          docker compose --env-file .env exec -T mssql bash -lc '
            PASS="${SA_PASSWORD:-$MSSQL_SA_PASSWORD}";
            echo "PASS set? ${PASS:+yes}";
            SQLCMD=$([ -x /opt/mssql-tools18/bin/sqlcmd ] && echo /opt/mssql-tools18/bin/sqlcmd || echo /opt/mssql-tools/bin/sqlcmd);
            echo "Using $SQLCMD";
            "$SQLCMD" -C -S localhost,1433 -U sa -P "$PASS" -d master -Q "SELECT DB_NAME();"
          '

      - name: Sanity dbo.trades present
        run: |
          docker compose --env-file .env exec -T mssql bash -lc '
            PASS="${SA_PASSWORD:-$MSSQL_SA_PASSWORD}";
            SQLCMD=$([ -x /opt/mssql-tools18/bin/sqlcmd ] && echo /opt/mssql-tools18/bin/sqlcmd || echo /opt/mssql-tools/bin/sqlcmd);
            "$SQLCMD" -C -S localhost,1433 -U sa -P "$PASS" -d master \
              -Q "SELECT DB_NAME() db, SCHEMA_NAME(schema_id) sch, name FROM sys.tables WHERE name=''trades'';"
            "$SQLCMD" -C -S localhost,1433 -U sa -P "$PASS" -d master \
              -Q "IF OBJECT_ID(''dbo.trades'',''U'') IS NULL BEGIN RAISERROR(''dbo.trades missing'',16,1); END"
          '

      - name: Run regression suite
        run: |
          docker compose --env-file .env --profile regression run --rm regression-runner

      - name: Compose logs
        if: always()
        run: |
          {
            echo "===== mssql-init (last 15m) ====="
            docker compose --env-file .env logs --no-color --since 15m mssql-init || true
            echo "===== regression-runner (last 15m) ====="
            docker compose --env-file .env logs --no-color --since 15m regression-runner || true
            echo "===== all (last 15m) ====="
            docker compose --env-file .env logs --no-color --since 15m || true
          } | tee -a compose.log

      - name: Upload compose logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: compose.log

      - name: Tear down
        if: always()
        run: docker compose --env-file .env down -v --remove-orphans
