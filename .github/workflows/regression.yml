# .github/workflows/regression.yml
name: Regression

on:
  push:
    branches: [ main ]
  schedule:
    - cron: "0 02 * * *"     # nightly 02:00 UTC
  workflow_dispatch:

jobs:
  regression:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      COMPOSE_PROJECT_NAME: tradestore
      COMPOSE_PROFILES: regression

    steps:
      - uses: actions/checkout@v4

      #Free up some disk space on GitHub runners (helps big images)
      - name: Free disk space
        run: |
          sudo rm -rf /usr/local/lib/android /opt/ghc || true
          docker system prune -af || true

      - uses: docker/setup-buildx-action@v3

      # Create .env for compose (used by mssql + mssql-init)
      - name: Write .env for compose
        run: |
          echo "MSSQL_SA_PASSWORD=${{ secrets.MSSQL_SA_PASSWORD }}" > .env
          echo "DROP_TABLE=false" >> .env
          
      - name: Set up Docker layer cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Create .env for docker compose (read by your compose file)
      - name: Write .env for compose
        run: |
          cat > .env <<EOF
          MSSQL_SA_PASSWORD=${{ secrets.MSSQL_SA_PASSWORD }}
          # you can add other overrides here if needed
          EOF

      # Build regression runner image (kept separate from compose images)
      - name: Build RegressionRunner 
        env:
          DOCKER_BUILDKIT: "0"
        run: |
          docker build \
            -f tests/RegressionRunner.Dockerfile \
            -t tradestore/regression:latest \
            .


      - name: Bring up infra + apps
        run: |
          docker compose --env-file .env --profile regression up -d \
            redpanda redpanda-init mongo mssql tradedata \
            kafkaconsumer kafkaconsumermssql

      - name: Init DB (one-off)
        run: |
          docker compose --env-file .env run --rm --no-deps mssql-init

      - name: Run regression suite
        run: |
          docker compose --env-file .env run --rm --no-deps regression-runner
          

      # (Swap caches after build to keep them small)
      - name: Move build cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache || true

      # Quick visibility into what’s running
      - name: Show container state
        run: |
          docker ps -a
          echo
          docker compose ps
          echo
          docker compose ls

      # Wait for API health + check health statuses to avoid race conditions
      - name: Wait for services to be healthy
        run: |
          set -e
          # wait for healthchecks to pass
          for i in {1..60}; do
            unhealthy=$(docker compose ps --format json | jq -r '.[] | select(.Health!="healthy") | .Name' | xargs)
            [ -z "$unhealthy" ] && break
            echo "Waiting for healthy containers... not healthy: $unhealthy"
            sleep 2
          done

          # ping API health endpoint
          for i in {1..60}; do
            if curl -fsS http://localhost:8001/health >/dev/null 2>&1; then
              echo "tradedata healthy"
              break
            fi
            echo "Waiting for tradedata health..."
            sleep 2
          done

          # optional: check Redpanda topic exists
          docker compose exec -T redpanda rpk topic list --brokers redpanda:9092 || true

      - name: Run regression suite
        run: |
          # Use --rm so the ephemeral regression-runner is removed afterwards
          docker compose --env-file .env --profile regression run --rm regression-runner

      # collect logs
      - name: Compose logs
        env:
          COMPOSE_PROJECT_NAME: tradestore
          COMPOSE_PROFILES: regression
          DROP_TABLE: "false"        # <— add this
        if: always()
        run: |
          echo "===== mssql-init (last 15m) ====="
          docker compose --env-file .env logs --no-color --since 15m mssql-init || true
          echo "===== regression-runner (last 15m) ====="
          docker compose --env-file .env logs --no-color --since 15m regression-runner || true

      - name: Upload compose logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: compose.log

      # If your regression runner writes junit/coverage, upload them too
      - name: Upload regression artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: regression-artifacts
          path: |
            tests/.pytest_cache
            tests/junit.xml
            tests/coverage.xml
          if-no-files-found: ignore

      # Tear everything down (including volumes) to keep the runner clean
      - name: Tear down
        if: always()
        run: docker compose --env-file .env down -v --remove-orphans
