#docker compose up -d
version: "3.8"
services:
  redpanda:
    image: redpandadata/redpanda:latest
    container_name: redpanda
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp 1
      - --memory 1G
      - --reserve-memory 0M
      - --node-id 0
      - --check=false
      - --kafka-addr PLAINTEXT://0.0.0.0:9092
      - --advertise-kafka-addr PLAINTEXT://127.0.0.1:9092
    ports:
      - "9092:9092"
      - "9644:9644"





#new

version: "3.9"

services:
  redpanda:
    image: redpandadata/redpanda:latest
    container_name: redpanda
    command:
      - redpanda start
      - --overprovisioned
      - --smp=1
      - --memory=1G
      - --reserve-memory=0M
      - --node-id=0
      - --check=false
      # Kafka listeners (inside network + advertised for host)
      - --kafka-addr=PLAINTEXT://0.0.0.0:9092
      - --advertise-kafka-addr=PLAINTEXT://host.docker.internal:9092
      # (optional) pandaproxy if you ever need it:
      - --pandaproxy-addr=0.0.0.0:8082
      - --advertise-pandaproxy-addr=host.docker.internal:8082
    ports:
      - "9092:9092"
      - "8082:8082"
    healthcheck:
      test: ["CMD", "rpk", "cluster", "info", "-X", "brokers=localhost:9092"]
      interval: 5s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      redpanda:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      # Inside docker network Kafka UI reaches redpanda by service name
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: redpanda:9092
    ports:
      - "8080:8080"
    restart: unless-stopped

  mongo:
    image: mongo:6
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping').ok"]
      interval: 5s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  mssql:
    # SQL Server only ships x86_64; run under emulation on Apple Silicon
    platform: linux/amd64
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: mssql
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "Str0ngP@ssw0rd!"
      MSSQL_PID: "Developer"
    ports:
      - "1433:1433"
    volumes:
      - mssql_data:/var/opt/mssql
    healthcheck:
      test: [ "CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P $$SA_PASSWORD -Q 'SELECT 1' || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 30
    restart: unless-stopped

volumes:
  mongo_data:
  mssql_data:
